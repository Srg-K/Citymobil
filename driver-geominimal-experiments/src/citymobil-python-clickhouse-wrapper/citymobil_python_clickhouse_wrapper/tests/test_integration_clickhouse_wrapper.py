import datetime
import logging
import sys
import unittest

import numpy
import pandas

from citymobil_python_clickhouse_wrapper.clickhouse_wrapper import ClickHouseWrapper

CH_URL = "http://local_clickhouse:8123"


# CH_URL = "http://localhost:8123"


class TestClickhouseWrapperBasic(unittest.TestCase):
    def setUp(self) -> None:
        logging.basicConfig(stream=sys.stdout, level=logging.DEBUG)
        logger = logging.getLogger()
        self._clickhouse = ClickHouseWrapper(
            logger,
            CH_URL,
            "default",
            "")

    def test_execute_1(self) -> None:
        # arrange

        # action
        self._clickhouse.execute("select 1")

        # assert
        # it returns None, so no assert here

    def test_fetch_1(self) -> None:
        # arrange
        expected = pandas.DataFrame({"1": [1]})

        # action
        actual = self._clickhouse.fetch("select 1")
        print(actual)

        # assert
        self.assertTrue(expected.equals(actual))

    def test_disabled_logger(self) -> None:
        # arrange
        expected = pandas.DataFrame({"1": [1]})
        clickhouse_withou_logger = ClickHouseWrapper(
            None,  # disabled logger
            CH_URL,
            "default",
            "")

        # action
        actual = clickhouse_withou_logger.fetch("select 1")

        # assert
        self.assertTrue(expected.equals(actual))
        # we expect to have to log records
        # but in this test we have, because of
        # logging.basicConfig(stream=sys.stdout, level=logging.DEBUG)

    def test_create_own_event_loop(self) -> None:
        # arrange
        expected = pandas.DataFrame({"1": [1]})
        clickhouse_withou_logger = ClickHouseWrapper(
            logging.getLogger(),
            CH_URL,
            "default",
            "",
            create_and_assign_event_loop=True  # enabled event loop creation
        )

        # action
        actual = clickhouse_withou_logger.fetch("select 1")

        # assert
        self.assertTrue(expected.equals(actual))

    def test_allow_nested_event_loop(self) -> None:
        # arrange
        expected = pandas.DataFrame({"1": [1]})
        clickhouse_withou_logger = ClickHouseWrapper(
            logging.getLogger(),
            CH_URL,
            "default",
            "",
            allow_nested_event_loops=True  # enabled nested event loops
        )

        # action
        actual = clickhouse_withou_logger.fetch("select 1")

        # assert
        self.assertTrue(expected.equals(actual))


class TestClickhouseWrapperAdvanced(unittest.TestCase):
    def setUp(self) -> None:
        logging.basicConfig(stream=sys.stdout, level=logging.DEBUG)
        logger = logging.getLogger()
        self._clickhouse = ClickHouseWrapper(
            logger,
            CH_URL,
            "default",
            "")

        self._clickhouse.execute("drop database IF EXISTS dynamic_configs")
        self._clickhouse.execute(
            "create database IF NOT EXISTS dynamic_configs")

        self._clickhouse.execute(
            "drop table IF EXISTS dynamic_configs.polygon_coefficient_model_assigner")
        self._clickhouse.execute(
            """create table IF NOT EXISTS dynamic_configs.polygon_coefficient_model_assigner
(
    name_polygon String,
    polygon_coordinates String,
    is_enabled UInt8,
    id_coefficient_model UInt16,
    date_time Nullable(DATETIME)
) ENGINE = MergeTree()
    ORDER BY name_polygon""")

    def test_fetch_1(self) -> None:
        # arrange
        expected = pandas.DataFrame({
            "date_time": [None],
            "id_coefficient_model": [7032],
            "is_enabled": [1],
            "name_polygon": ['Ярославль'],
            "polygon_coordinates": [
                '[["57.561711213773","39.900267722473"],["57.574809221059","39.843319060669"],["57.582769675412","39.824032557491"],["57.590528940757","39.815934258294"],["57.596067025993","39.80939601873"],["57.598240463293","39.802256964346"],["57.614161005939","39.784417843584"],["57.621075532296","39.808385970459"],["57.644035956353","39.797286239585"],["57.669306442053","39.770534636841"],["57.68926109648","39.751051070557"],["57.695695729769","39.764268996582"],["57.704426611603","39.756715895997"],["57.729642395475","39.746544959412"],["57.725831304501","39.773452880249"],["57.706101130076","39.786546045488"],["57.711910130517","39.811140522984"],["57.724076386327","39.806942789742"],["57.731188531571","39.818194580426"],["57.734075922234","39.834596212419"],["57.719729670077","39.848361004549"],["57.705692615257","39.787056511438"],["57.687972891299","39.818964146013"],["57.669527971052","39.77137118152"],["57.643933405673","39.797721507416"],["57.651089347003","39.901254775391"],["57.66544297715","39.965112807617"],["57.653482014618","39.983308913574"],["57.6277064932","39.973352553711"],["57.620131616125","39.906249301048"],["57.570612839423","39.942539336547"],["57.551607759066","39.980219008789"],["57.546301165283","39.970691802368"],["57.542193790506","39.971206786499"],["57.54511034677","39.927187498253"],["57.561711213773","39.900267722473"]]'],
        })
        self._clickhouse.execute(
            """insert into dynamic_configs.polygon_coefficient_model_assigner (name_polygon, polygon_coordinates, is_enabled, id_coefficient_model)
VALUES ('Ярославль',
        '[["57.561711213773","39.900267722473"],["57.574809221059","39.843319060669"],["57.582769675412","39.824032557491"],["57.590528940757","39.815934258294"],["57.596067025993","39.80939601873"],["57.598240463293","39.802256964346"],["57.614161005939","39.784417843584"],["57.621075532296","39.808385970459"],["57.644035956353","39.797286239585"],["57.669306442053","39.770534636841"],["57.68926109648","39.751051070557"],["57.695695729769","39.764268996582"],["57.704426611603","39.756715895997"],["57.729642395475","39.746544959412"],["57.725831304501","39.773452880249"],["57.706101130076","39.786546045488"],["57.711910130517","39.811140522984"],["57.724076386327","39.806942789742"],["57.731188531571","39.818194580426"],["57.734075922234","39.834596212419"],["57.719729670077","39.848361004549"],["57.705692615257","39.787056511438"],["57.687972891299","39.818964146013"],["57.669527971052","39.77137118152"],["57.643933405673","39.797721507416"],["57.651089347003","39.901254775391"],["57.66544297715","39.965112807617"],["57.653482014618","39.983308913574"],["57.6277064932","39.973352553711"],["57.620131616125","39.906249301048"],["57.570612839423","39.942539336547"],["57.551607759066","39.980219008789"],["57.546301165283","39.970691802368"],["57.542193790506","39.971206786499"],["57.54511034677","39.927187498253"],["57.561711213773","39.900267722473"]]',
        1,
        7032)""")

        # action
        actual = self._clickhouse.fetch(
            "select * from dynamic_configs.polygon_coefficient_model_assigner")
        print(expected)
        print("separate")
        print(actual)

        # assert
        self.assertTrue(expected.equals(actual))

    def test_insert_rows_1(self) -> None:
        # arrange
        expected = pandas.DataFrame({
            "date_time": [None],
            "id_coefficient_model": [7032],
            "is_enabled": [1],
            "name_polygon": ['Ярославль'],
            "polygon_coordinates": [
                '[["57.561711213773","39.900267722473"],["57.574809221059","39.843319060669"],["57.582769675412","39.824032557491"],["57.590528940757","39.815934258294"],["57.596067025993","39.80939601873"],["57.598240463293","39.802256964346"],["57.614161005939","39.784417843584"],["57.621075532296","39.808385970459"],["57.644035956353","39.797286239585"],["57.669306442053","39.770534636841"],["57.68926109648","39.751051070557"],["57.695695729769","39.764268996582"],["57.704426611603","39.756715895997"],["57.729642395475","39.746544959412"],["57.725831304501","39.773452880249"],["57.706101130076","39.786546045488"],["57.711910130517","39.811140522984"],["57.724076386327","39.806942789742"],["57.731188531571","39.818194580426"],["57.734075922234","39.834596212419"],["57.719729670077","39.848361004549"],["57.705692615257","39.787056511438"],["57.687972891299","39.818964146013"],["57.669527971052","39.77137118152"],["57.643933405673","39.797721507416"],["57.651089347003","39.901254775391"],["57.66544297715","39.965112807617"],["57.653482014618","39.983308913574"],["57.6277064932","39.973352553711"],["57.620131616125","39.906249301048"],["57.570612839423","39.942539336547"],["57.551607759066","39.980219008789"],["57.546301165283","39.970691802368"],["57.542193790506","39.971206786499"],["57.54511034677","39.927187498253"],["57.561711213773","39.900267722473"]]'],
        })

        # action
        self._clickhouse.insert_rows(
            "dynamic_configs.polygon_coefficient_model_assigner",
            [
                [7032, 1, 'Ярославль',
                 '[["57.561711213773","39.900267722473"],["57.574809221059","39.843319060669"],["57.582769675412","39.824032557491"],["57.590528940757","39.815934258294"],["57.596067025993","39.80939601873"],["57.598240463293","39.802256964346"],["57.614161005939","39.784417843584"],["57.621075532296","39.808385970459"],["57.644035956353","39.797286239585"],["57.669306442053","39.770534636841"],["57.68926109648","39.751051070557"],["57.695695729769","39.764268996582"],["57.704426611603","39.756715895997"],["57.729642395475","39.746544959412"],["57.725831304501","39.773452880249"],["57.706101130076","39.786546045488"],["57.711910130517","39.811140522984"],["57.724076386327","39.806942789742"],["57.731188531571","39.818194580426"],["57.734075922234","39.834596212419"],["57.719729670077","39.848361004549"],["57.705692615257","39.787056511438"],["57.687972891299","39.818964146013"],["57.669527971052","39.77137118152"],["57.643933405673","39.797721507416"],["57.651089347003","39.901254775391"],["57.66544297715","39.965112807617"],["57.653482014618","39.983308913574"],["57.6277064932","39.973352553711"],["57.620131616125","39.906249301048"],["57.570612839423","39.942539336547"],["57.551607759066","39.980219008789"],["57.546301165283","39.970691802368"],["57.542193790506","39.971206786499"],["57.54511034677","39.927187498253"],["57.561711213773","39.900267722473"]]']
            ],
            [
                "id_coefficient_model",
                "is_enabled",
                "name_polygon",
                "polygon_coordinates",
            ]
        )

        # assert
        actual = self._clickhouse.fetch(
            "select * from dynamic_configs.polygon_coefficient_model_assigner")
        print(f"expected:{expected}")
        print(f"actual:{actual}")
        self.assertTrue(expected.equals(actual))

    def test_insert_rows_2_insert_3_in_a_row(self) -> None:
        # arrange
        expected = pandas.DataFrame({
            "date_time": [None, None, None],
            "id_coefficient_model": [7032, 7033, 7034],
            "is_enabled": [1, 0, 1],
            "name_polygon": ['Ярославль', 'Москва', 'Павлодар'],
            "polygon_coordinates": ['c1', 'c2', 'c3'],
        })
        expected = expected.set_index("id_coefficient_model")
        expected = expected.sort_index()

        # action
        self._clickhouse.insert_rows(
            "dynamic_configs.polygon_coefficient_model_assigner",
            [
                [7032, 1, 'Ярославль', 'c1'],
                [7033, 0, 'Москва', 'c2'],
                [7034, 1, 'Павлодар', 'c3'],
            ],
            [
                "id_coefficient_model",
                "is_enabled",
                "name_polygon",
                "polygon_coordinates",
            ]
        )

        # assert
        actual = self._clickhouse.fetch(
            "select * from dynamic_configs.polygon_coefficient_model_assigner")
        actual = actual.set_index("id_coefficient_model")
        actual = actual.sort_index()
        print(f"expected:{expected}")
        print(f"actual:{actual}")
        self.assertTrue(expected.equals(actual))

    def test_insert_rows_3_throw_on_no_rows(self) -> None:
        # arrange
        # action
        # assert
        self.assertRaises(Exception,
                          self._clickhouse.insert_rows,
                          "dynamic_configs.polygon_coefficient_model_assigner",
                          [
                              # empty! has to throw
                          ],
                          [
                              "id_coefficient_model",
                              "is_enabled",
                              "name_polygon",
                              "polygon_coordinates",
                          ]
                          )

    def test_insert_rows_4_throw_on_no_fields(self) -> None:
        # arrange
        # action
        # assert
        self.assertRaises(Exception,
                          self._clickhouse.insert_rows,
                          "dynamic_configs.polygon_coefficient_model_assigner",
                          [
                              [7032, 1, 'Ярославль', 'c1'],
                              [7033, 0, 'Москва', 'c2'],
                              [7034, 1, 'Павлодар', 'c3'],
                          ],
                          [
                              # empty! has to throw
                          ]
                          )

    def test_insert_rows_5_serialize_datetime_that_drops_microseconds(
            self) -> None:
        # arrange
        current_datetime = datetime.datetime.now()
        current_time_without_microsec = current_datetime.replace(
            microsecond=0)
        expected = pandas.DataFrame({
            "date_time": [current_time_without_microsec],
            "id_coefficient_model": [7032],
            "is_enabled": [1],
            "name_polygon": ['Ярославль'],
            "polygon_coordinates": [
                '[["57.561711213773","39.900267722473"],["57.574809221059","39.843319060669"],["57.582769675412","39.824032557491"],["57.590528940757","39.815934258294"],["57.596067025993","39.80939601873"],["57.598240463293","39.802256964346"],["57.614161005939","39.784417843584"],["57.621075532296","39.808385970459"],["57.644035956353","39.797286239585"],["57.669306442053","39.770534636841"],["57.68926109648","39.751051070557"],["57.695695729769","39.764268996582"],["57.704426611603","39.756715895997"],["57.729642395475","39.746544959412"],["57.725831304501","39.773452880249"],["57.706101130076","39.786546045488"],["57.711910130517","39.811140522984"],["57.724076386327","39.806942789742"],["57.731188531571","39.818194580426"],["57.734075922234","39.834596212419"],["57.719729670077","39.848361004549"],["57.705692615257","39.787056511438"],["57.687972891299","39.818964146013"],["57.669527971052","39.77137118152"],["57.643933405673","39.797721507416"],["57.651089347003","39.901254775391"],["57.66544297715","39.965112807617"],["57.653482014618","39.983308913574"],["57.6277064932","39.973352553711"],["57.620131616125","39.906249301048"],["57.570612839423","39.942539336547"],["57.551607759066","39.980219008789"],["57.546301165283","39.970691802368"],["57.542193790506","39.971206786499"],["57.54511034677","39.927187498253"],["57.561711213773","39.900267722473"]]'],
        })

        # action
        self._clickhouse.insert_rows(
            "dynamic_configs.polygon_coefficient_model_assigner",
            [
                [
                    7032,
                    1,
                    'Ярославль',
                    '[["57.561711213773","39.900267722473"],["57.574809221059","39.843319060669"],["57.582769675412","39.824032557491"],["57.590528940757","39.815934258294"],["57.596067025993","39.80939601873"],["57.598240463293","39.802256964346"],["57.614161005939","39.784417843584"],["57.621075532296","39.808385970459"],["57.644035956353","39.797286239585"],["57.669306442053","39.770534636841"],["57.68926109648","39.751051070557"],["57.695695729769","39.764268996582"],["57.704426611603","39.756715895997"],["57.729642395475","39.746544959412"],["57.725831304501","39.773452880249"],["57.706101130076","39.786546045488"],["57.711910130517","39.811140522984"],["57.724076386327","39.806942789742"],["57.731188531571","39.818194580426"],["57.734075922234","39.834596212419"],["57.719729670077","39.848361004549"],["57.705692615257","39.787056511438"],["57.687972891299","39.818964146013"],["57.669527971052","39.77137118152"],["57.643933405673","39.797721507416"],["57.651089347003","39.901254775391"],["57.66544297715","39.965112807617"],["57.653482014618","39.983308913574"],["57.6277064932","39.973352553711"],["57.620131616125","39.906249301048"],["57.570612839423","39.942539336547"],["57.551607759066","39.980219008789"],["57.546301165283","39.970691802368"],["57.542193790506","39.971206786499"],["57.54511034677","39.927187498253"],["57.561711213773","39.900267722473"]]',
                    current_datetime,
                ]
            ],
            [
                "id_coefficient_model",
                "is_enabled",
                "name_polygon",
                "polygon_coordinates",
                "date_time"
            ]
        )

        # assert
        actual = self._clickhouse.fetch(
            "select * from dynamic_configs.polygon_coefficient_model_assigner")
        print(f"expected:{expected}")
        print(f"actual:{actual}")
        self.assertTrue(expected.equals(actual))

    def test_insert_rows_6_serialize_numpy_none(self) -> None:
        # arrange
        expected = pandas.DataFrame({
            "date_time": [None],
            "id_coefficient_model": [7032],
            "is_enabled": [1],
            "name_polygon": ['Ярославль'],
            "polygon_coordinates": [
                '[["57.561711213773","39.900267722473"],["57.574809221059","39.843319060669"],["57.582769675412","39.824032557491"],["57.590528940757","39.815934258294"],["57.596067025993","39.80939601873"],["57.598240463293","39.802256964346"],["57.614161005939","39.784417843584"],["57.621075532296","39.808385970459"],["57.644035956353","39.797286239585"],["57.669306442053","39.770534636841"],["57.68926109648","39.751051070557"],["57.695695729769","39.764268996582"],["57.704426611603","39.756715895997"],["57.729642395475","39.746544959412"],["57.725831304501","39.773452880249"],["57.706101130076","39.786546045488"],["57.711910130517","39.811140522984"],["57.724076386327","39.806942789742"],["57.731188531571","39.818194580426"],["57.734075922234","39.834596212419"],["57.719729670077","39.848361004549"],["57.705692615257","39.787056511438"],["57.687972891299","39.818964146013"],["57.669527971052","39.77137118152"],["57.643933405673","39.797721507416"],["57.651089347003","39.901254775391"],["57.66544297715","39.965112807617"],["57.653482014618","39.983308913574"],["57.6277064932","39.973352553711"],["57.620131616125","39.906249301048"],["57.570612839423","39.942539336547"],["57.551607759066","39.980219008789"],["57.546301165283","39.970691802368"],["57.542193790506","39.971206786499"],["57.54511034677","39.927187498253"],["57.561711213773","39.900267722473"]]'],
        })

        # action
        self._clickhouse.insert_rows(
            "dynamic_configs.polygon_coefficient_model_assigner",
            [
                [
                    7032,
                    1,
                    'Ярославль',
                    '[["57.561711213773","39.900267722473"],["57.574809221059","39.843319060669"],["57.582769675412","39.824032557491"],["57.590528940757","39.815934258294"],["57.596067025993","39.80939601873"],["57.598240463293","39.802256964346"],["57.614161005939","39.784417843584"],["57.621075532296","39.808385970459"],["57.644035956353","39.797286239585"],["57.669306442053","39.770534636841"],["57.68926109648","39.751051070557"],["57.695695729769","39.764268996582"],["57.704426611603","39.756715895997"],["57.729642395475","39.746544959412"],["57.725831304501","39.773452880249"],["57.706101130076","39.786546045488"],["57.711910130517","39.811140522984"],["57.724076386327","39.806942789742"],["57.731188531571","39.818194580426"],["57.734075922234","39.834596212419"],["57.719729670077","39.848361004549"],["57.705692615257","39.787056511438"],["57.687972891299","39.818964146013"],["57.669527971052","39.77137118152"],["57.643933405673","39.797721507416"],["57.651089347003","39.901254775391"],["57.66544297715","39.965112807617"],["57.653482014618","39.983308913574"],["57.6277064932","39.973352553711"],["57.620131616125","39.906249301048"],["57.570612839423","39.942539336547"],["57.551607759066","39.980219008789"],["57.546301165283","39.970691802368"],["57.542193790506","39.971206786499"],["57.54511034677","39.927187498253"],["57.561711213773","39.900267722473"]]',
                    numpy.nan,
                ]
            ],
            [
                "id_coefficient_model",
                "is_enabled",
                "name_polygon",
                "polygon_coordinates",
                "date_time"
            ]
        )

        # assert
        actual = self._clickhouse.fetch(
            "select * from dynamic_configs.polygon_coefficient_model_assigner")
        print(f"expected:{expected}")
        print(f"actual:{actual}")
        self.assertTrue(expected.equals(actual))

    def test_insert_data_frame_1(self) -> None:
        # arrange
        expected = pandas.DataFrame({
            "date_time": [None, None],
            "id_coefficient_model": [7032, 7033],
            "is_enabled": [1, 0],
            "name_polygon": ['Ярославль', 'Москва'],
            "polygon_coordinates": ['с1', 'c2'],
        })

        # action
        self._clickhouse.insert_data_frame(
            "dynamic_configs.polygon_coefficient_model_assigner", expected)

        # assert
        expected = expected.set_index("id_coefficient_model")
        expected = expected.sort_index()
        actual = self._clickhouse.fetch(
            "select * from dynamic_configs.polygon_coefficient_model_assigner")
        actual = actual.set_index("id_coefficient_model")
        actual = actual.sort_index()
        print(f"expected:{expected}")
        print(f"actual:{actual}")
        self.assertTrue(expected.equals(actual))
